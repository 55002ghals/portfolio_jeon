ROP(Return Oriented Programming)
https://blog.0e1.kr/iptime-10-x-pre-auth-bof/
FSP(Format String Bug)

어셈블리어 공부하고 :
쉘코드 만드는 법

1. 정보보안 전문가도 분야가 다양하다고 생각합니다! 
어떤 분야의 전문가를 하실지는 충분히 공부하시고 열심히 몰두해서 공부하다보면 어느새 
아시게 되지 않을까 싶네요 ㅎㅎ 포너블쪽에 관심이 많으시면 나중에 ctf해보시거나 리얼월드쪽 
보시면 흥미 있으실 것 같아요! 네트워크 취약점 관련해서는 우선 네트워크 이론을 대강 아셔야할 것 
같아요! 원래 네트워크가 어떤식으로 동작하는지 알아야, 네트워크 취약점 공부가 훨씬 수월하고 쏙쏙 
들어올 것 같습니다. 와이어샤크라고 패킷캡쳐하는 툴이 있는데, 한 번 찾아보세요! 보안기법은 정확히 
어떤 기법을 말씀하시는것인지는 모르겠지만 만약 암호학을 말씀하신거라면 
이론적 배경(논문이나 정리된 블로그등)을 이해하시고 실제 구현된 걸 분석해보시는 것을 추천합니다~ 
크립토쪽도 wargame 사이트가 있는데 이쪽으로 더 관심 있으시면 연락주세요!

2. 군대.. 몸 조심히 다녀오세요.. 
저도 취업쪽으로 잘 모르지만 사실 뭐 어디에 취업할지에 따라 천차만별이라고 생각합니다. 
보안만 하는 기업들에서는 자격증 딱히 필요 없을 것 같고
(ctf대회 출전 경력, 버그바운티 경력등이 더 중요), 
일반 it 스타트업에서는 물론 없는것보다는 있는게 좋겠지만, 
그것보다 프로젝트 경험을 더 크게 쳐줄 것 같습니다(제 주변만 봤을때 제가 느낀 사견입니다).

----------------------------------------

물어볼 것.
1.
함수의 return값이 %eax에 들어간다는 건 알겠는데 

0x80485c1 <main+193>:   mov    %eax,%eax

이 부분이 이해가 잘 안감. %eax는 칸이 2개인가?

2. 
core 파일은 수정권한이 있을때만 dump되는가?
	-> ㅇㅇ 맞음.

4.
64bit gdb 까보는데 이해 안되는게 너무 많다;; pwnable.kr flag문제

5. ARM 어셈블리 질문
(gdb) disass key2
Dump of assembler code for function key2:
   0x00008cf0 <+0>:	push	{r11}		; (str r11, [sp, #-4]!)
   0x00008cf4 <+4>:	add	r11, sp, #0
   0x00008cf8 <+8>:	push	{r6}		; (str r6, [sp, #-4]!)
   0x00008cfc <+12>:	add	r6, pc, #1
   0x00008d00 <+16>:	bx	r6
   0x00008d04 <+20>:	mov	r3, pc
   0x00008d06 <+22>:	adds	r3, #4
   0x00008d08 <+24>:	push	{r3}
   0x00008d0a <+26>:	pop	{pc}
   0x00008d0c <+28>:	pop	{r6}		; (ldr r6, [sp], #4)
   0x00008d10 <+32>:	mov	r0, r3
   0x00008d14 <+36>:	sub	sp, r11, #0
   0x00008d18 <+40>:	pop	{r11}		; (ldr r11, [sp], #4)
   0x00008d1c <+44>:	bx	lr
End of assembler dump.

> r0에 들어가는 값이 pc+0x4라는데, 그럼 *key2+16 부분의 분기문은 어떻게 생각해야하지?

