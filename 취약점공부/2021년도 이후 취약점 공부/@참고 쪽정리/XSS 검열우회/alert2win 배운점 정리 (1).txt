alert(1) to win

adobe)
-> 앞에 역슬래쉬 붙어서 이스케이프 시키는 replace의 경우:
	앞에 역슬래쉬를 하나 더 붙여 역슬래쉬가 역슬래쉬를 이스케이프 시키고 
	검열 대상은 그대로 적용되도록 한다.

-> 뒷 부분 syntax error 발생 시, 그냥 script문 닫아버리던가 
   주석처리(html은 //)로 걍 마무리 짓는다.


markdown)
-> onload나 onclick말고 onerror도 생각해봤어야했는데 못했다.
-> 이벤트 핸들러는 따옴표 없이도 script를 삽입 가능하다.
-> 이벤트 핸들러에 해당하는 문자열은 javascript로 취급되기 때문에 
  JS에서의 주석처리인 //이 허용된다. 때문에,
  <img.. ..onerror=alert(1)// ..> 이라고 해도 뒤에 내용이 주석처리된다.


skandia)
-> 문자 검열이나 방해관련 우회방법 2가지
=============================================================================
*HTML entitiy
	: HTML문서를 코딩할 때 태그와 혼용되는 것을 막기 위해 브라우저 상에 
	  예약된 문자.
	-> HTML entity는 JavaScript가 해석되기 전에 미리 해석되기 때문에 script사이에 
	   HTML entity가 섞여있다면 해석된 후 JS와 함께 해석된다.
-----------------------------------------------------------------------------
이런 식으로 넣는다(alert(1)을 encoding한 것)
			&#x61&#x6C&#x65&#x72&#x74
-----------------------------------------------------------------------------
=============================================================================


=============================================================================
*URL encoding
	: URL 인코딩을 통해 문자열을 삽입할 수 있다. 방법은 다음과 같다.
		-> JavsScript선에서 걸러지지 않는다는 전제 하에, 서버로 넘어가는
	  	  값은 URL인코딩을 미리 하든 나중에 브라우저에 의해 하든 같다는 판단.
-----------------------------------------------------------------------------
data:, %61%6c%65%72%74(1)
-----------------------------------------------------------------------------
=============================================================================

* payload 2

</script><script src="data:, %61%6c%65%72%74(1)"> 
//script 태그의 src속성에 data URL scheme을 이용하여 alert(1)을 삽입(URL encoding)
//“data:“와 ”,“ 사이에 들어가는 mediatype은 defalult값으로 text로 되나봄아마도


callback)

<script>태그 내에서,
세미콜온이나 콜론으로 필요없는 코드를 감싸고 세미콜론을 붙이면 앞 내용은 씹히고 콜론 뒤에 
코드를 작성할 수 있다. 
=============================================================================
ex) <script>'({"userdata":"';alert(1)//"})</script>
	->single quote로 앞부분 다 씹고 alert(1)하고 뒷 부분은 주석으로 씹음
=============================================================================

template)
=============================================================================
*innerHTML의 문자열 처리방식
	:innerHTML의 경우 내부 문자열 중에서 Hex와 Oct값을 원본 문자열로써 치환한다.
ex)
document.body.innerHTML = "\x3ca\x3ehi</a>";
-> 위 ex코드의 결과로서 본문에는 a태그가 정상적으로 삽입된다.
	(\x3ca\x3e == Hex(“<a>“))
=============================================================================

* 0x는 정수값을 16진수로 나타낼때 앞에 붙이고, 
  \x는 string안에서 16진수로 char값을 바꿀때 붙인다.
	
