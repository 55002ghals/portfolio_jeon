웹이란 무엇인가:
-인터넷상의 서비스 중 http를 이용하여 정보를 공유하는 
 통신 서비스를 웹이라고 한다.
-> 서비스 제공 대상을 웹 서버, 사용자를 웹 클라이언트라 칭함.

*http: 인터넷 상에서 서버와 클라이언트 사이의 통신을 위한 프로토콜

-웹 해킹을 위해서는 설계자 또는 운영자보다 놓은 이해도를 
 가지고 있아야 한다.
-> 웹에 대한 기본적인 이해가 필요하다.

-웹은 브라우저라는 소프트웨어의 등장과 발전으로 
 인해 대중적인 접근성이 높아지게 되었다.

웹의 역사:

초기: 저장된 문서의 내용을 출력해 사용자에게 제공함.
 ->과거에는 별다른 로직 없이 단순한 정적 페이지를 보여주는 
     기능을 하였다.

웹 기초지식:

-------------------------------------------------------------------------------
Web Browser (웹 브라우저)
웹에 접속하기 위해 사용하는 소프트웨어입니다.

Web Resource
웹 상에 존재하는 모든 콘텐츠입니다. (HTML, CSS, JS, PDF, PNG 등)

URI (URL)
URI는 Uniform Resource Identifier의 약자로 리소스를 식별하기 위한 식별자입니다.

HTTP (HyperText Transfer Protocol)
인터넷 서비스에서는 서비스 대상 간 통신 규약(Protocol)을 지정하여 통신합니다.
HTTP는 웹을 이용하기 위한 통신 규약입니다.

HTTPS (HyperText Transfer Protocol Secure)
기존 HTTP 데이터를 암호화하여 통신합니다.

Cookie
웹 브라우저에 저장하는 데이터입니다.

Session
서버에 저장하는 데이터입니다.

Domain Name
인터넷(웹) 네트워크상에서 컴퓨터를 식별하는 이름입니다. (e.g. www.naver.com은 네이버의 서버 컴퓨터를 식별하는 이름입니다.)

Server
서버는 인터넷상에서 사용자에게 서비스를 제공하는 컴퓨터입니다.
그 중 웹 서버는 사용자(웹브라우저)와 HTTP를 이용하여 통신하는 서버입니다.

Application
서버에서 설정한 특정 기능들을 수행하는 소프트웨어입니다.

DataBase (DB)
데이터를 저장하기 위해 사용하는 데이터 저장소입니다.

--------------------------------------------------------------------------------------

1. 웹 브라우저
- 웹 브라우저는 http를 통해 인터넷 상에서 통신을 하며 
  서버로부터 전달받은 다양한 웹 리소스 들을 가공해 
  사용자에게 보여줌.
-> 모든 취약점은 사용자의 입력값에서부터 시작함.
    사용자 입력값은 모두 웹 브라우저를 통해 전송되므로
    웹 해킹을 위해서는 브라우저의 행위를 필수적으로 이해해야함.

간단한 통신과정 요약:

1. 사용자가 브라우저를 통해 "www.google.com"입력
2. 해당 url에 해당하는 정보를 서버에 브라우저가 요청(http형식으로)
3. 서버 응답, 브라우저로 전송
4. 브라우저가 http형식을 해석하고 사용자가 보기좋게 출력.

네트워크 프로그램:

-nc또는 telent같은 네트워크 프로그램을 통해 웹을 
 사용하기 위해서는 웹 서버가 이해하고 해석할 수 있는 
 형태(http)의 데이터를 직접 작성하여 전송하여야함.

---------------------------------------------------------------------------------------------

$ echo -ne "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"| nc example.com 80
HTTP/1.1 200 OK    
//여기까지가 웹 서버에 전송할 데이터를 직접 작성하여 전송하는 명령어
Accept-Ranges: bytes
Cache-Control: max-age=604800
Content-Type: text/html; charset=UTF-8
Date: Fri, 10 Jan 2020 07:24:17 GMT
Etag: "3147526947+gzip"
Expires: Fri, 17 Jan 2020 07:24:17 GMT
Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
Server: ECS (sgt/B3B1)
Vary: Accept-Encoding
X-Cache: HIT
Content-Length: 1256
<!doctype html>
<html>
<head>
    <title>Example Domain</title>
    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
...
    </style>    
</head>
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

------------------------------------------------------------------------------------------------------

CLI 프로그램:
-curl,wget같은 CLI프로그램을 통해 웹을 사용하게 되면 서버가
 응답하여 주는 데이터를 단순히 출력만 하게 됨.
 -> html을 해석하여 화면에 출력하는 기능 ,
     css로 스타일을 입히는 기능, 자바스크립트를 실행하는 
     기능은 포함되지않음.

*CLI: 그래픽 요소를 가지지 않는 어플리케이션을 말함.
**GUI: CLI와는 다르게 일반적인 그래픽 요소가 있고 클릭 가능한 어플.
***css: HTML에 그래픽을 입혀주는 언어
※ HTML로 웹의 내용을 작성하고, CSS로 웹을 디자인하며, 
    자바스크립트로는 웹의 동작을 구현한다.

---------------------------------------------------------------------------------------

$ curl example.com   //curl이라는 CLI를 이용해 exapmle.com에 접속하는 명령어
                                (검색 해보니까 서버에서 정보를 요청하는 거인듯?)
<!doctype html>
<html>
<head>
    <title>Example Domain</title>
    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
...
    </style>    
</head>
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

------------------------------------------------------------------------------------------

웹 리소스:

-웹상에서 사용하는 컨텐츠를 의미함.
->주소창에 http://dreamhack.io/index.html주소를 입력한다면
   dreamhack.io에 존재하는 /index.html 리소스에 대해 
   요청을 수행하는 것을 의미합니다.

-이렇게 웹 리소스를 가리키는 주소들은 URL이라고 불린다.

-사용자가 웹 브라우저를 통해 보게 되는 페이지를 구성하는 대표적인
 웹 리소스는 다음과 같다.
 
1. HTML: 웹 문서의 뼈대를 구축하기 위한 마크업 언어임
	정해진 태그와 속성을 지정하여 문서를 구성함.

2. CSS: HTML이 표시되는 방법을 정의하는 스타일 시트언어
          이미지,태그,글자등 다양한 웹 리소스들의 출력시 스타일을 결정함.

3. JS(자바스크립트): HTML와 CSS로 화면에 출력되는 뼈대를 작성한다면
		 JS 같은 Clint Side Script를 통해 페이지 내의 행위들을 
                           설정할 수 있다.

※ HTML과 CSS는 서버에서 가져오지만 JS같은 경우에는 
   클라이언트 사이드에서 코드가 행해지는 처리임.

URI(Uniform Resource Identifier):
-리소스를 식별하기위한 식별 URL(Uniform Resource Locator)은
 리소스의 위치를 식별하기위한 URI의 하위 개념이다.
 ->요즘은 혼용해서 사용한다고 한다.

- URI는 Scheme, Authority(Userinfo, Host,Port),
  Path,Query,Fragment의 구성요소를 가짐.

-URI의 구성요소별 구조는 폰에 사진있음.
-------------------------------------------------------------------------------
-Scheme(protocol)

웹 서버에 접속할 때 어떤 체계(프로토콜)를 이용할지에 대한 정보를 담고 있습니다.

-Host
Authority의 일부로써 접속할 웹 서버의 호스트(서버 주소)에 대한 정보를 가지고 있습니다.

-Port
Authority의 일부로써 접속할 웹 서버의 포트에 대한 정보를 가지고 있습니다.

-Path
접속할 웹 서버의 경로에 대한 정보를 가지고 있으며 /로 구분됩니다.

-Query
웹 서버에 전달하는 파라미터 (추가적인 정보)이며 URI에서 ? 뒤에 붙습니다.

-Fragment
메인 리소스 내에 존재하는 서브 리소스에 접근할 때 이를 식별하기 위한 정보를 담고 있으며 URI에서 # 뒤에 붙습니다.

-------------------------------------------------------------------------------
예제:
http://example.com:80/path?search=1#fragment

https: -https프로토콜을 사용하여 통신한다.

//example.com:80 -호스트 서버 주소(example.com)와 포트번호이다.

※이게 서버 주소고 웹 리소스는 이것 이후에 /~~~하고 나온다.
   위에 웹 리소스의 정의 ㄱㄱ(웹 리소스와 호스트 주소 헷갈리지 말기)

/path -웹 브라우저가 연결하려는 리소스까지의 경로

?search=1 -웹 브라우저가 서버에게 전달하려는 파라미터 이다.

#pragment -웹 브라우저만 가지고있는 데이터이다. 
	    페이지 내에서의 서브리소스를 식별할때 사용한다.


Encording(인코딩):
-문자 또는 기호등의 정보, 형태를 다른  형태나 형식으로
 변환하는 것 또는 그러한 처리 방식을 말함

*디코딩: 인코딩의 역과정이다.
**인크립션: 양방향 암호 알고리즘, 
                일치한 알고리즘과 유효한 키를 가지고 있다면 
                원래 정보로 복원이 가능하다.

->웹에서 사용하는 대표적 인코딩은 URL과 HTML Entity가 있다.

1. URL encording(percent encording)

-URI구조 내에서 예약어(구분자)로 사용되는 문자들을 전송하고자
 할때 사용됨. 예약어들은 URI구조 내에서 문법적으로 중요하기 때문에,
 문법적으로 사용되지 않을 경우 반드시 인코딩되어 사용되야 함.

*예약어: ?,#,=등 의미가 지정되어 그 외에는 사용될 수 없는 문자.
---------------------------------------------------------------------------
ex) 
http://example.com/?a=%3Fb&c=%26d

-%3F는 ?를 의미하며, %26은 &를 의미한다.
   ->인코딩 방식: Ascii테이블에서 매칭되는 16진수 값 앞에 %를 붙임 됨.

-----------------------------------------------------------------------------

2. HTML entitiy Encording

-HTML문서 내에서 사용되는 문자열들이 HTML에서 
 사용되는 태그들의 문자로 인식되지 않도록 사용함.
  ->16진수 아스키코드 앞에 &#x를 붙여서 인코딩함.



HTTP(HTTPS): 
-프로트콜임,프로토콜은 컴퓨터 내부 혹은 컴퓨터 사이에서
 어떻게 데이터가 교환되는지 정의하는 규칙체계이다. 

※https://dreamhack.io는 https 방식으로 dreamhack.io서버와 통신한다는 의미이다.

-HTTP,HTTPS는 웹에서 이루어지는 통신을 정의한 프로토콜이며,
 TCP혹은 TLS(암호화된 TCP)를 사용해 통신한다. 기본포트로는
 80(HTTP),443(HTTPS)를 사용한다.
 ->사용 포트번호는 임의로 변경가능하다.

-HTTPS는 HTTP의 문제점인 평문전송을 보완하여 등장하였지만,
 구조및 동작원리는 동일하다.(때문에 뭉뚱그려 HTTP라고 함)

-HTTP는 사용자가 서버에 요청을 하는 request와 response로 이뤄진다.

1.HTTP Request
-서버에 대한 요청을 의미
 
------------------------------------------------------------------------------------------------

HTTP request의 구성요소:

Method
:서버에 요청 시 수행하고자 하는 동작을 나타냅니다.
:메소드 들은 각 목적을 두고 설계 되었지만, 서버에서의 설정 방식이나 웹 어플리케이션의 처리에 따라 다르게 사용도 가능하다.

-----------------------------------------------------------------------------------
-메소드의 종류:

OPTIONS
-요청하는 리소스가 허용하는 메소드 목록을 반환합니다. 예를 들어 /login페이지가 OPTIONS, GET, POST 메소드만 허용하는 경우 OPTIONS, GET, POST가 반환됩니다.

HEAD
-GET 메소드와 동일하지만, Response의 Body 부분은 받지 않고, Header만 받습니다. (e.g. 서버의 상태 확인 등)

GET
-리소스를 요청합니다. (e.g. 게시물/프로필 보기, 이미지 등)

POST
-특정 리소스 생성 및 데이터 추가를 위해 값을 제출할 때 사용합니다. (e.g. 게시물/프로필 생성 등)

PUT
-특정 리소스의 내용을 보낸 값으로 설정합니다. (e.g. 생성/업데이트 등)

PATCH
-특정 리소스의 내용 중 보낸 값의 key만 변경합니다. (e.g. 게시글 업데이트 등)

DELETE
-특정 리소스를 삭제합니다. (e.g. 게시물 삭제 등)

TRACE
-요청받은 값을 Response의 Body로 다시 클라이언트에게 되돌려줍니다.
----------------------------------------------------------------------------------------------
Path
:사용자가 서버에 요청하는 웹 리소스의 경로입니다.(서버 주소는 header에 있다 구분하길!)

Version
:HTTP의 버전을 나타냅니다.

Header
:서버에 추가 정보를 전달하는 데이터 부분입니다. 사용자가 입력한 데이터를 
 전달하기 위한 부분보다는 사용자와 서버가 상호작용하기 위한 정보를
 담는 부분으로 사용됩니다.
 (e.g. 사용자 데이터의 처리 방식 및 형식에 대한 정보, 서버에서 사용자를 식별하기 위한 쿠키 정보 등)

------------------------------------------------------------------------------------------------
header의 종류(대표적):

Host
-데이터를 보내는 서버의 주소를 의미합니다.

Cookie
-사용자를 식별하기 위해 사용하는 정보입니다.

User-Agent
-사용자가 사용하는 프로그램의 정보를 나타냅니다.(대부분 웹 브라우저의 정보)

Referer
-페이지 이동 시 이전 URI의 정보를 나타냅니다.

Content-Type
-사용자가 전달하는 데이터의 처리 방식과 형식을 나타냅니다. 
 사용자와 서버 간의 데이터 처리 방식이 일치되어야 정상적으로 데이터 통신이 이루어집니다.

※이 외에도 HTTP가 허용하는 header가 많다.
--------------------------------------------------------------------------------------------------

Body
:사용자가 입력한 데이터를 서버에 전달 시 데이터를 담는 부분입니다.

-------------------------------------------------------------------------------------------

-HTTP에서는 각 줄이 CRLF로 줄바꿈이 이루어 져야한다.
*CRLF: 마우스 커서를 맨좌측 맨 아래로 이동시킴을 의미, 굳 줄 바꿈과 같음.

-HTTP Request구조중 가장 첫 줄은 사용자가 서버에 요청시 수행하고자 하는 동작인
 Method, 요청하는 웹 리소스의 경로인 Path,사용되는 HTTP의 버전을 나타내는 Version으로 구성된다.

-두 번째 줄부터는 Header부분, Header 부분의 각 줄은 이름(:값)의 형태로 이루어진다.
 Header은 상황에 따라 얼마나 많은 데이터가 담길지 모르기 때문에 Header의 끝에는
 한번더 CRLF로 표시해둔다.

-마지막 줄은 Body부분이다. 여기에는 사용자의 데이터를 담는다.

요약: (Method)/(path)/(Version)
	(header)
	(body)


2. HTTP Response
: 서버의 응답

-마찬가지로 CRLF로 줄바꿈 표시

-첫줄에는 Version과 사용자의 요청에 대한 
 서버의 상태 응답 코드인 Status code로 구성된다.

-두번째 줄 부터는 header 부분이다. Request와 같이 이름(:값) 의 형태로 이루어진다.
 마지막 줄은 서버의 응답 데이터 부분인 Body로 구성된다.

※Request의 Body보다 Response의 body가 그 이름의 의미에 더 부합한듯 하다. 

-웹 해킹에서는 사용자의 입력에 대한 서버의 응답에 주목해야한다. 
 예를 들어 악의적인 입력을 보냈을때, 500status code(Internal server error)가 
 응답되면 해당 입력이 서버에 어떤 영향을 끼쳤다고 짐작할 수 있고,
 취약점이 있다고 가정해 더 살펴볼 수 있기 때문이다.

----------------------------------------------------------------------
HTTP respond의 구성 요소:

Version:
HTTP의 버전을 나타냅니다.

Status code:
사용자의 요청에 대한 서버의 처리 결과를 나타냅니다.

---------------------------------------------------------
Status code 중 주로 사용되는 code들:

200번 영역
:사용자의 요청에 대한 서버의 처리가 성공하였음을 나타냅니다.
-200 OK
-201 Created

300번 영역
:사용자가 요청한 리소스가 다른 경로로 변경된 경우를 나타내는 영역,
->웹 브라우저에서 300번 영역의 응답 상태 코드가 반환되면, 
   Response Header에 포함되어 있는 Location 헤더의 값으로 리다이렉션 합니다.

-301 Moved Permanently
-302 Found

400번 영역
:사용자가 서버에 요청하는 구조 또는 데이터가 잘못되었음을 나타내는 영역입니다.

-400 Bad Request
사용자가 전달한 데이터 또는 구조의 잘못된 문법으로 인하여 
서버가 요청을 이해할 수 없음을 의미합니다.

-403 Forbidden
사용자가 해당 웹 리소스에 접근할 권리를 가지고 있지 않음을 나타냅니다.

-404 Not Found
사용자가 요청한 웹 리소스의 경로에 대해 응답할 데이터가 없음을 나타냅니다.

-405 Method Not Allowed
사용자가 요청한 Method가 서버에서는 허용하지 않는 Method임을 나타냅니다.

500번 영역
:서버의 에러와 관련된 영역입니다.

-500 Internal Server Error
서버의 에러가 발생하였음을 나타냅니다.

-503 Service Unavailable
서버가 사용자의 요청을 처리할 준비가 되지 않았음을 나타냅니다.
----------------------------------------------------------

Header:
사용자와 상호작용하기 위한 데이터를 담는 부분으로 사용됩니다.

------------------------------------------------------------
header의 종류:

Content-Type
:서버의 응답 데이터를 웹 브라우저에서 처리할 방식과 형식을 나타냅니다.

Content-Length
:서버가 사용자에게 응답해주는 데이터의 길이를 나타냅니다.(보안의 용도)

Server
:서버가 사용하는 소프트웨어의 정보를 나타냅니다.

Allow
:허용되는 Method 목록을 사용자에게 알려줄 때 사용합니다.

Location
:300번 영역의 응답 코드 사용 시 변경된 웹 리소스의 주소를 나타냅니다.

Set-Cookie
:사용자에게 쿠키를 발급할 때 사용합니다. 해당 헤더를 받은 웹 브라우저는 해당 쿠키를 저장합니다.

*쿠키: HTTP의 일종으로 사용자가 웹 사이트 방문시, 
         그 사이트가 사용하는 서버를 통해 사용자의 컴퓨터에 설치되는 작은 기록 정보 파일을 일컫음.
---------------------------------------------------------------

Body:
서버가 사용자에게 응답하는 데이터를 담는 부분입니다.

-------------------------------------------------------------------------
HTTP 질의 응답 예시:

Hello라는 문자열을 띄우자는 Request문:

POST/board/HTTP/1.1                             //메소드/path/ 버전
Host: dreamhack.io                                //헤더
Cookie: sessionid=abcd12345667890;         //헤더; 쿠키
Connection: keep-alive
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36   //헤더; 소프트웨어 정보
Content-Length: 44                               //헤더; 코드길이
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
title=Hello!&content=This+is+METHOD+example.         //바디
  
response문:

HTTP/1.1 200 OK                     //버전 & return cord
Server: Apache/2.4.29 (Ubuntu)   //헤더
Connection: Keep-Alive
Content-Type: text/html
Content-Length: 106
[                                          //바디
  {
    "id": 1, 
    "title": "First article!"
  },
  {
    "id": 2, 
    "title": "Lorem Ipsum"
  }
]
-----------------------------------------------------------------

Cookie:

-HTTP는 하나의 Request와 Response쌍이 독립적으로 구성되어 통신하는 
 "connectionless, stateless"프로토콜이다.

*connectionless 속성은 하나의 요청에 하나의 응답을 한 후 네트워크 연결을 끝맽는 것을 의미한다.
 다수의 사용자에게 서비스 되어야 하는 웹의 특성상 계속 연결상태를 유지하는 것은
 서버의 부하로 이어질 가능성이 있어 이와 같은 특징을 가지게 되었다.
 -예전에는 connectionless의 속성이 강조 되었지만 최근에는 네트워크, 서버의 성능 향상으로 인해
   HTTP/1.1버전 부터는 Keep-Alive를 통해 일정 시간은 사용자와 서버가 계속 연결을 맺는 방식을 사용한다.

*stateless 속성은 네트워크가 연결이 끝맺을 때 상태를 유지하지 않는 것을 의미합니다.

-HTTP요청마다 새로운 커넥션을 열기 때문에 사용자 인증을 계속 해야한다는 단점이 있다.
 따라서 상태 유지를 위해 Cookie라는 개념이 나왔다.

-웹 브라우저는 HTTP Response의 Set-cookie 헤더나 JavaScript의 "document.cookie"를 통해 
 데이터를 쿠키에 저장한다.
-----------------------------------------------------------------------------
예시)
HTTP Response:

HTTP/1.1 200 OK
Server: Apache/2.4.29 (Ubuntu)  //헤더
Set-Cookie: name=test;        //key=value
Set-Cookie: age=30; Expires=Fri, 30 Sep 2022 14:54:50 GMT;
...

Javascript:

document.cookie = "name=test;"   //쿠키에 데이터 저장(key=value쌍이 이 말인듯)
document.cookie = "age=30; Expires=Fri, 30 Sep 2022 14:54:50 GMT;"

---------------------------------------------------------------------------------

-데이터를 "key=value;"쌍으로 쿠키에 저장하고 ";"뒤에 쿠키의 만료시간, 접근할수 있는 도메인
 등의 추가옵션을 설정 할 수 있다.

-이러면 추후 HTTP요청을 보낼때 웹 브라우저가 자동으로 쿠키를 헤더에 추가해 전송합니다.
  (이러면 추가적인 사용자 인증은 반복이 필요없음)

- 쿠키는 인증 상태를 포함 할 수 있다.
-> 브라우저가 cookie: id=guest;를 서버에 보냈다고 하면,(key=value에서 value가 guest인것)
   서버는 해당 정보를 가지고 인증된 사용자의 정보를 응답한다.

-쿠키는 사용자의 브라우저에 저장된다, 인증상태를 쿠키에 저장하면 다음과 같은 상황이 발생하게
 된다.
------------------------------------
1. 유저: 난 명환이고 비밀번호는 1234야!
   서버: DB를 보니 너 명환이 맞구나! 앞으로는 그냥 이름=명환 이라고 말해줘!(인증 상태를 담은 쿠키 response)

2. 유저: 이름=명환, 파일좀 보여줘
   서버: 명환이구나!그래!

3. 해커: 이름=명환, 파일좀 보여줘!          //인증상태 쿠키를 조작함
   서버: 그래!
-------------------------------------


Session: 사용자가 인증 상태를 조작한 쿠키를 만들수도 있기 때문에, 서버에 데이터를 저장하기 위해
	session을 사용한다. 세션을 활용하면 데이터를 서버에 저장하고 해당 데이터를 접근 할 수
	있는 유추할 수 없는 랜덤 문자열 키를 만들어 응답하며, 이를 보통 session ID라고 부른다.

-브라우저는 해당 키를 쿠키에 저장하고 이후에 HTTP요청을 보내면 서버에서 해당 키에 해당하는
 데이터를 가져와 인증상태를 확인힌다.

-쿠키는 데이터 자체를 사용자가 저장하며, 세션은 서버가 저장한다는 핵심적인 차이가 있다.

--------------------------------------------------------
1. 유저: 내 파일좀 보여줘!
   서버: 너 누구야? 처음보니까 티켓을 줄게, 앞으로 말할땐 티켓=502gdf를 붙여서 말해!   
	//앞과는 달리 브라우저에 도착한 쿠키에는 인증상태가 아닌 session ID가 있음

2. 유저: 티켓=502gdf, 파일좀 보여줘
   서버: 명환이구나! 이제 티켓=502gdf를 사용하는 사람은 명환! 기억할게.

3. 유저: 티켓=502gdf, 내 파일좀!
   서버: 티켓=502gdf은 명환! 그래, 여기있어!

3. 해커: 이름=명환, 파일좀 보여줘!          //인증상태 쿠키를 조작함
   서버: 이름으로는 인증이 안돼! 티켓을 가져와!
   해커: session ID는 모르는데!
----------------------------------------------------------

-웹 브라우저에는 localStorage라는 저장공간도 존재하는데 세션 아이디가 쿠키에 국한되지 않고
 localstorage등의 다양한 곳에 저장되어 사용 될 수도 있다.

HTTP/HTTPS:

-HTTP는 모든 데이터가 평문으로 암호화 없이 전송된다. 그렇기에, 네트워크에서 전송되는
 데이터를 감청할 수 있다면 HTTP를 사용하는 통신은 평문으로 노출되어 위험해질 수 있다.

-HTTPS는  Transport Layer Security(TLS), Secure Sockets Layer(SSL)를 
 사용해서 암호화한다. 공개키 암호화를 사용해서 클라이언트와 서버가 키를
 교환하기 때문에 비교적 안전하다.

-우리가 지금까지 본 해석 가능한 질의 응답은 모두 HTTP형식이였다고 하면
 https는 암호화 되어있기 때문에 통신의 내용을 알수 없다(깨져서 나옴)

Domain Name/ Host Name:

-URI 구성요소중 host는 웹 브라우저가 어디에 연결할지 정하게 된다.
 여기에 Domain name이나 Internet Protocol(IP) Address가 Host에 사용된다.
 ->즉 도메인 네임은 주소의 한 형태임

-IP address는 네트워크상 통신이 이루어질때 장치들을 식별하기 위해 사용되는
 주소이다.

-Domain name을 이용해 Host를 조회할 때에는 Domain Name Server(DNS)에서 조회해 등록된 IP address를
 가져와 사용한다.

*Domain Name Server(DNS): Domain name과 IP address 정보를 매핑해 저장한다.

-nslookup 명령어를 통해 Domain name의 정보를 확인할 수 있다.
------------------------------------------------(리눅스 기준)
$ nslookup example.com
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	example.com
Address: 93.184.216.34
--------------------------------------------------

웹 서버 어플리케이션:

-웹 서버는 사용자의 HTTP요청을 해석하여 처리, 응답해주는 역할을 함.

-대표적으로는 nginx,Apache,Tomcat,IIS등이 있다.

-웹 서버는 사용자로부터 받는 요청을 웹 서버 자체적으로 처리할지, 
 들어온 요청에 알맞은 내부 서비스로 연결해줄지를 정할 수 있다. 
 예를 들어, 클라이언트가 접근한 URI가 .html 확장자를 가진 리소스에 요청 시 
 웹 서버에서 해당 경로의 html을 반환해주고, .php 확장자를 가진 리소스에 
 요청 시 php 엔진을 통해 해당 요청을 처리하며, /payment/ 경로로 시작하는 
 요청에 대해서는 payment를 처리하기 위한 어플리케이션에게 요청을 연결해주는 
 역할을 수행하는 것이 가능합니다.

*PHP: 프로그래밍 언어, 원래는 동적 웹 페이지를 만들기 위해 설계되었으며
         이를 구현하기 위해 PHP로 작성된 코드를 HTML 소스 문서 안에 넣으면 
         PHP 처리 기능이 있는 웹 서버에서 해당 코드를 인식하여 작성자가 원하는 웹 페이지를 생성한다.

웹 어플리케이션:

-사용자의 요청을 동적으로 처리할 수 있도록 만들어진 어플리케이션.

-웹 어플리케이션을 작성할 때는 사용자의 요청내용을 동적으로 처리하기 위해
 Web Application Language가 사용되며 대표적으로 PHP, NodeJS, Python,
 Java등이 있다.

-그 외의 많은 언어들과 pathon의 django, flask / java의 spring처럼 
 웹 개발을 편하게 해주는 프레임 워크도 존재한다.

-또한 웹 어플리케이션은 서버에서 동작하기 때문에 웹 어플리케이션 구현체에사
 취약점이 발생하게 되면 서버와 직접적으로 연결되어 있어 더 큰 영향을 끼치게 된다.

-Database Management System(DBMS):

-DBMS은 데이터베이스 내의 데이터 조회/수정/삽입을 용이하게 사용할 수 있도록
 도와주는 서버 어플리케이션이다. MySQL,MS-SQL등이 있으며, 
 해당 어플리케이션이 관히라는 데이터를 데이터베이스라고 한다.

-프로그래머는 DB의 내용을 조회/수정/삽입 하기위해서 DBMS을 사용한다.
 DBMS는 SQL Query를 통해 제어되는데, 이때 사용자의 입력값을 SQL Quey의
 필터링 없이 사용하게 되면 SQL Injection공격에 노출되게 된다.


