[Cross Site Request Forgery]

-웹 브라우저는 기본적으로 Same origin Policy에 위반되지 않은 
 모든 요청에 쿠키를 함께 전송한다.

-비정상적으로 사용자의 의도와 무관하게 다른 사이트에 HTTP요청을
 보내는 것을 CSRF공격이라 한다.

[CSRF공격]

-CSRF공격을 통해 공격자가 얻을 수 있는 이득은 해당 세션 쿠키를 가진
 사람만 사용할 수 있는 기능을 요청 할 수 있다는 것이다.

-기존 권한을 갖고 있는 사용자가 쓸 수 있는 정상적인 기능을 공격자가
 사용자의 의도와 무관하게 요청을 보내 원하는 이득을 얻을 수 있다.

-예를 들어, 공격자에세 임의 금액을 송금하게 만들어 금전적 이득을 얻거나,
 사용자의 패스워드를 공격자가 임의로 설정한 값으로 변경 해 계정을
 탈취하거나, 관리자 권한을 가진 사용자를 공격해 공지사항을 작성하는 등의
 혼란을 야기시킬 수 있다.

-CSRF 공격을 성공적으로 수행하기 위해서는 아래의 2가지 조건이 요구된다.

1. 해당 웹 사이트가 쿠키를 이용한 인증방식을 사용해야한다.
  ->모든 HTTP전송에는 쿠키가 함께 전송되기 때문에 쿠키에 저장된
     세션 ID도 전송됨

2. 공격자가 사전에 알수 없는 파라미터가 존재해서는 안됨.
    ->자동입력방지 문자를 넣어야하는 요청은 공격자가 미리 알 수 없다.
    -> 패스워드 변경 기능에서 기존 패스워드를 입력 받는다면 이 또한
        공격자가 미리 알 수 없다.

------------------------------------------------
[CSRF공격에 취약한 요청 예시]

1.사용자가 dreamhack에게 1227원을 보내려고 하여 bank.dreamhack.io서버에게
   세션쿠키를 이용하여 사용자 검증을 보냄
      ->send money API를 통해 HTTP요청을 전송함.
(HTTP request는 다음과 같다.)
----------------------------------------------------
GET/sendmoney?to=dreamhack&amount=1337 HTTP/1.1
Host: bank.dreamhack.io
Cookie: session=IeheighaiToo4eenahw3
----------------------------------------------------

-위에 보이는 것처럼, to 와 amount라는 이름의 Query 파라미터와
 쿠키를 함께 bank.dreamhack.io에 HTTP요청을 보냄.
--------------------------------------------------------------------
(아래 소스코드로 구현된 송금 기능을 하는 웹 사이트라고 상정)
@app.route('/sendmoney')
def sendmoney(name):
	to_user = request.args.get('to')
	amount = int(request.args.get('amount'))

	success_status = send_money(to_user, amount)
	
	if success_status:
		return "Send success."
	else:
		return "Send fail."
--------------------------------------------------------------------

-여기서 CSRF공격을 통해 다음과 같은 Html코드를 삽입하면 된다.

1.<img src=1 onerror="fetch('/sendmoney?to=dreamhack&amount=1337');">

*Fetch API를 이용하면 Request나 Response와 같은 HTTP의 파이프라인을 구성하는 요소를 조작하는것이 가능합니다 
**onerror는 이미지가 없을 시에 대체할 이미지를 지정할 수 있다.

2.<img src="/sendmoney?to=dreamhack&amount=1337">
* img는 페이지에 이미지를 삽입하는 태그이며, 뒤에 scr 속성을 부여하여 이미지의 경로를 
 정할 수 있다.

3.<link rel="stylesheet" href="/sendmoney?to=dreamhack&amount=1337">

* link 태그는 해당 문서와 외부 소스사이의 관계를 정의 할 때 사용된다.
  이러한 link 요소는 외부 스타일 시트를 연결 할 때 사용된다.

**rel 속성은 현재 문서와 외부 리소스 사이의 연관관계를 명시한다.
   (<link rel="속성값">)꼴임.
***속성값이 stlesheet일때는 스타일시트로 사용할 외부 리소스를 불러온다는 것이다.
****herf 속성은 연결할 주소(URI)를 나타냄

- 이와 같은 HTML태그를 respond에 삽입했다면 숫자만 바꿈으로써 원하는 값의 송금을 시킬 수있다. 

[CSRF방어]

-CSRF가 가능한 이유를 다시한번 생각해보면 웹 브라우저가 크로스 사이트,
 즉 다른 사이트로부터 시작된 요청에 쿠키를 함께 전송한다는 것이다.

-웹 브라우저가 쿠키를 다른 사이트로부터 시작된요청에 삽입할 지는 SameSite쿠키 설정을
 보고 결정하게 된다.

-쿠키에는 key=value를 포함해 추가적인 설정 값도 함께 저장된다.
 기존 Domain,Expire,Path등만 있었지만 새롭게 SameSit옵션이 추가된다.

-크로스 사이트에서 출발한 요청에 제한적으로 쿠키를 포함 시키게 하는 옵션이다.

-총 3가지(Strict, Lax,Normal)값을 설정할 수 있으며, 아무것도 설정하지 않으면
 Normal과 동일한 권한을 가진다.

-기본적으로 Strict는 모든 크로스 사이트에서 출발한 요청에 쿠키를 넣지 않는다.
 Lax는 Link, Prerender,Form,GET을 제외한 요청에는 삽입하지않고 
 Normal은 기존과 같이 모든 요청에 삽입한다.

※크롬 브라우저는 2020년도부터 개발자가 강제로 Samesite=None;Secure;을 넣지 않는 이상
  모든 쿠키에 SameSite=Lax를 강제함.



