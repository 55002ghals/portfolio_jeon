[Open Redirect]

-Redirect는 사용자의 Location(위치)를 이동시키기 위해 사용하는 기능 중 하나이다.

-Redirect가 사용되는 코드는 아래 코드와 같이  HTTP Ressponse의 300번대
 영역을 통해 이동되거나, JS를 통해 이동하는 경우가 대부분이며 이때 
 이동하는 주소가 공격자에 의해 변경될 경우 Open direct취약점이 
 발생하게 된다.
------------------------------------------------------
from flask import Flask, request, redirect
app = Flask(__name__)
@app.route('/redirect')
def index():
	return redirect(request.args.get('url'))
------------------------------------------------------
-Open Redirect 취약점은 사용자가 접속한 도메인 사이트에 대한 신뢰를
 무너뜨릴 수 있는 공격으로 Open Redirect취약점을 통해 피싱사이트로 접속 을 유도하거나, 다른 취약점을 연계하여 사용자를 공격할 수 있다.

-공격 방법은 Redirect가 발생하는 경로에서 공격자의 입력값에 의해 
 Redirect되는 주소가 변경 될 경우, 해당 경로와 공격자의 값이 함께 전달되도록 사용자를 유도하여 Redirect가 실행되는 방법이 있다.

[Mitigation]

-Redirect기능은 서비스적인 측면에서 사용해야 하는 경우가 존재하며, 오픈  리다이렉트 취약점으로 발생할 수 있는 피해를 최소화 시키도록 해야한다.

-Redirect기능 구현시 이동을 허용할 주소들에 대해서만 이동시키는 방법이  있다.(아래 코드)
---------------------------------------------------------------------
from urllib.parse import urlparse
from flask import Flask, request, redirect
app = Flask(__name__)
@app.route('/redirect')
def index():
	userUrl = request.args.get('url')
	parseResult = urlparse(userUrl)
	if parseResult.scheme in ['http', 'https']: # 'https'
		if parseResult.netloc in ['dreamhack.io', 'test.dreamhack.io']: # 'dreamhack.io'
			return redirect(userUrl)
	return "malicious URL"
--------------------------------------------------------------------------
-사용자의 입력 값으로 리다이렉트 되는 기능을 사용해야 하는 경우 
 서버에서 해당 링크에 대한 검증을 거친 후에 사용자에게 배포하거나, 외부 
 링크로 이동하는 것을 사용자가 알도록 하는 방법 등이 있다.




