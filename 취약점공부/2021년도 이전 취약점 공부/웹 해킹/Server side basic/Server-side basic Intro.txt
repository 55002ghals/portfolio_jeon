[server-side basic]

-서버에서는 사용자가 요청한 데이터를 해석하고 처리한 후 사용자에게 응답한다.

-그 과정에서 웹 어플리케이션이나 데이터베이스같은 서버의 자원을 이용해 처리하기도 한다.

-이 과정에서 사용자의 요청 데이터에 의해 발생하는 취약점을 서버 사이드 취약점이라고 한다.

-Introduction of webhacking 강의에서 HTTP Request를 네트워크 프로그램을 통해 전송하는 것을 다뤘다.

-nc나 telent같은 네트워크 프로그램을 통해 HTTP Request를 보낼 때는 메소드나 요청 헤더처럼
 브라우저에서 조작하지 못하는 데이터도 조작하여 전송할 수 있기 때문에 
 서버에서는 사용자에게 받는 모든 입력 데이터를 신뢰하지 않아야 한다.
------------------------------------------------------------------------------------
$ echo -ne "POST /index.html HTTP/1.1\r\nHost: example.com\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nfoo=bar&hello=world" | nc example.com 80
HTTP/1.1 200 OK
Content-Length: 1256
...
<!doctype html>
<html>
<head>
    <title>Example Domain</title>
    <meta charset="utf-8" />
...
-----------------------------------------------------------------------
-개발과 운영 상의 실수로 인해 사용자의 데이터에 대한 검증 과정의 부재 또는 올바르지 않은 검증 과정의 사용으로
 인해 취약점이 발생 할 수 있다.
 
-HTTP 요청시 모든 데이터는 조작하여 전송이 가능하며, 악의적인 사용자는 이를 이용해
 서버의 취약점을 확인한다.

-웹을 통해 서비스를 제공하는 서버를 대상으로 공격을 시도하는 서버 사이드 취약점들은 
 서버 내에 존재하는 사용자들의 정보를 탈취하거나, 서버의 권한을 장악하는 등 서비스를 공격하는 것이 주 목적이다.

-취약점들의 분류는 기준에 따라 다양하게 분류될 수 있다.
----------------------------------------------------------------------------------
Injection (인젝션)
서버의 처리 과정 중 사용자가 입력한 데이터가 처리 과정의 구조나 문법적으로 사용되어 발생하는 취약점입니다.

File vulnerability
서버의 파일 시스템에 사용자가 원하는 행위를 할 수 있을 때 발생하는 취약점입니다.

Business Logic Vulnerability (비즈니스 로직 취약점)
인젝션, 파일 관련 취약점들과는 다르게 정상적인 흐름을 악용하는 것을 의미합니다.

Language specific Vulnerability (PHP, Python, NodeJS)
웹 어플리케이션에서 사용하는 언어의 특성으로 인해 발생하는 취약점을 다룹니다.

Misconfiguration
잘못된 설정으로 인해 발생하는 취약점을 다룹니다.
-----------------------------------------------------------------------------------
