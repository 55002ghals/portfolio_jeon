[시스템 해킹]
:소프트웨어를 공격하는 방법의 총칭

-프로그램은 오로지 구현대로만 동작하기 때문에 프로그래머는 이러한
 예외적인 경우를 처리하는 코드를 직접 작성해야 한다.
 만일 프로그래머가 이런 예외적인 처리를 빼먹는다면 영리한 해커는
 프로그램의 규칙을 악용해 자신이 원하는 바를 달성할 수 있을 것이다.

-소프트웨어 취약점의 대표적인 원인은 프로그래머의 실수이다.

[취약점의 분류]

익스플로잇:
취약점을 이용해 공격자가 의도한 동작을 수행하게 하는 코드 혹은 이를
악용한 공격 행위

-소프트웨어 버그는 보안에 영향을 미치는 정도에 따라 크게 4가지로 분류할 수
 있다. 

-소프트웨어 버그는 가장 포괄적인 위치에 있으며 프로그래머가 의도하지 않은
 동작을 수행하는 것이다. 그 중에서 보안에 영향을 미칠 수 있는 버그를
 소프트웨어 취약점이라고 하고, 소프트웨어 취약점 중 이를 이용해 공격자가
 의도한 동작을 수행할 수 있는 버그를 익스플로잇 가능한 취약점(exploitable vulnerability)이라고 
 한다.

-그러나 익스플로잇이 가능하다 한들 익스플로잇을 항상 안정적으로 성공할 수 있는 것은 아니다.

-보안 취약점에서 익스플로잇 확률은 위험성을 평가하는 중요한 요소중 하나인데,
 이런 익스플로잇 확률이 높을수록 탐지될 확률이 줄고 무기화하기 유용하다.
 이런 공격에 성공할 수있는 버그를 안정적으로 익스플로잇 가능한 취약점(Reliably Exploitable Vulnerability)
 이라고 한다.

[Attack Vector]

-모든 소프트웨어 취약점은 소프트웨어와 공격자가 상호 작용하는 곳, 즉 사용자의 입력에서부터
 발생한다. 이렇게 공격자가 소프트웨어와 상호 작용할 수 있는 곳을 Attack Vector(공격 벡터)
 라고 하며 이러한 공격 벡터들의 집합을 Attack surface라고 한다.

-예를 들어, 공격자는 입력창을 통해 프로그램과 상호작용 할 수 있기 때문에 그곳을 통해 
 공격자의 입력을 넣을 수 있고, 업로드 기능을 통해 이를 프로그램에 전달할 수 있다.
 이러한 부분은 모두 공격 벡터이다.

-그렇다면 이번에는 프로그램의 unreachable code 영역에 심각한 보안 취약점이 있다고 가정해보자,
 만약 해당 코드가 어디에서도 사용되지 않고 공격자가 이를 실행할 방법이 없다면 이는 보안 취약점이 아니다.
 그러나 이러한 코드도 잠재적으로 악용될 수 있는 코드이기 때문에 존재해서는 안된다.

[취약점의 분류]

-취약점은 크게보아 두가지로 나눌 수 있다.

-C,C++과 같은 저수준 언어에서 메모리를 조작해 공격하는 메모리 커럽션 취약점과
 메모리를 조작할 필요 없이 공격할 수 있는 로지컬 취약점이다.


[메모리 커럽션(corruption) 취약점]

-먼저 메모리 커럽션 취약점의 대표적 예시들에 대해 간략히 알아보자.

Buffer Overflow(BOF)
:가장 대표적이다. 이는 프로그래머가 할당한 크기의 버퍼보다 더 큰 데이터를
 입력받아 메모리의 다른 영역을 오염시킬 수 있는 취약점이다.
 버퍼 오버플로우는 발표된지 30년이 지나도 공격에 자주 사용된다.

Out-Of-Boundary(OOB)
: 버퍼의 길이 범위를 벗어나는 곳의 데이터에 접근할 수 있는 취약점이다.
 이 또한 버퍼 오버플로우와 마찬가지로 매우 강력한 취약점으로, 브라우저와 같은
 대규모 최신 소프트웨어에서도 자주 발생하는 취약점이다.

Off-by-one
:경계 검사에서 하나 더 많은 값을 쓸 수 있을 때 발생하는 취약점이다.
 가령 32바이트 버퍼에 인덱스32로 접근하는 것과 같은 경우이다.
 이는 반복문을 순회할 때 잘못된 비교 연산자를 사용하거나 인덱스가 0부터
 시작하는 것을 고려하지 못했을때 자주 발생한다.

Format String Bug(FSB)
:printf나 scanf와 같은 함수에서 폼ㅅ 스트링 문자열을 올바르게 사용하지 못해 발생하는 취약점이다.
 포멧 스트링 역시 매우 강력한 취약점이지만, 최신 컴파일러에는 여러가지 방법으로 이를
 방어하고 있어 최근에는 잘 발생하지 않고 있다.

Double Free / Use-After-Free(UAF)
:Double Free / Use-After-Free 취약점은 동적 메모리를 정확히 관리하지 
 못했을 때 발생하는 취약점이다. 이미 해제된 메모리를 다시 한번 해제하려고
 시도하는 것을 Double free, 해제된 메모리에 접근해 이를 사용하려고 하는 것을
 Use-After-Free 라고 한다.

기타 등등..

[로지컬 버그(취약점)]

-로지컬 버그는 메모리 커럽션 취약점과는 달리 프로그램의 메모리 구조를
 이용해 공격할 필요가 없다. 따라서 익스플로잇 작성이 비교적 간단하다.

Command Injection
: 사용자의 입력을 받아 셸에 전달해 실행할 때 정확한 검사를 실행하지 않아서
 발생하는 취약점이다. 익스플로잇이 많이 어렵지 않아 매우 강력한 취약점이다.

Race Condition
:여러 스레드나 프로세스의 자원 관리를 정확히 수행하지 못해 데이터가 오염되는
 취약점이다. 로지컬 버그 뿐만 아니라 메모리 커럽션 취약점으로도 분류되기도 한다.

Path Traversal
: 프로그래머가 가정한 디렉토리를 벗어나 외부에 존재하는 파일에 접근할 수 있는 취약점이다.
 주로 소스코드에서 "../"와 같은 경로문자를 검사하지 않아 발생한다.

guitar 등등..

[미티게이션(mitigation)]

-자연스럽게 취약점의 존재 여부와는 무관하게 프로그램을 보호하는 
 방법에 대한 고민이 이루어 졌고, 그에 따라 등장한 것이다.

-미티게이션은 취약점의 공격을 어렵게 만드는 일을 한다.

-대표적인 스택 버퍼 오버플로우의 미티게이션 중 하나인 Stack Smashing Protector(SSP)는
 버퍼 오버플로우를 방지하기 위해 버퍼의 뒤에 랜덤한 값을 넣어두고 이를
 특정 시점에 검사해서 버퍼가 오염되었는지 확인하는 것과 같은 방법을 쓴다.






